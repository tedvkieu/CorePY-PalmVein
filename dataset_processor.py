import os
import shutil
import numpy as np
import cv2
import json

class DatasetOrganizer:
    def __init__(self, source_dir, output_dir):
        """
        Kh·ªüi t·∫°o b·ªô x·ª≠ l√Ω dataset
        
        Args:
            source_dir (str): ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a d·ªØ li·ªáu g·ªëc
            output_dir (str): ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë·∫ßu ra cho dataset
        """
        self.source_dir = source_dir
        self.output_dir = output_dir
        
        # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(self.output_dir, exist_ok=True)
        
        # C√°c lo·∫°i file ƒë∆∞·ª£c h·ªó tr·ª£
        self.supported_raw_extensions = ['.raw', '.binm']
        self.supported_text_extensions = ['.txt', '.roi']
        
    def read_raw_image(self, file_path):
        """
        ƒê·ªçc ·∫£nh t·ª´ file .raw
        
        Args:
            file_path (str): ƒê∆∞·ªùng d·∫´n file .raw
            
        Returns:
            numpy.ndarray: ·∫¢nh ƒë√£ ƒë∆∞·ª£c reshape ho·∫∑c None n·∫øu th·∫•t b·∫°i
        """
        raw_data = np.fromfile(file_path, dtype=np.uint8)
        possible_shapes = [(512, 512), (640, 480), (480, 640), (256, 256), (1024, 1024)]
        
        for shape in possible_shapes:
            try:
                image = raw_data.reshape(shape)
                return image
            except ValueError:
                continue
        
        return None
    
    def process_user_folder(self, user_folder):
        """
        X·ª≠ l√Ω m·ªôt th∆∞ m·ª•c ng∆∞·ªùi d√πng
        
        Args:
            user_folder (str): T√™n th∆∞ m·ª•c ng∆∞·ªùi d√πng
            
        Returns:
            dict: Th√¥ng tin v·ªÅ qu√° tr√¨nh x·ª≠ l√Ω
        """
        # ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa th∆∞ m·ª•c ng∆∞·ªùi d√πng
        full_user_path = os.path.join(self.source_dir, user_folder)
        
        # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra cho ng∆∞·ªùi d√πng
        output_user_path = os.path.join(self.output_dir, user_folder)
        os.makedirs(output_user_path, exist_ok=True)
        
        # K·∫øt qu·∫£ x·ª≠ l√Ω
        processing_result = {
            'user': user_folder,
            'total_files': 0,
            'processed_images': 0,
            'skipped_files': [],
            'errors': []
        }
        
        # L·ªçc v√† nh√≥m file theo t√™n (kh√¥ng ph√¢n bi·ªát ph·∫ßn m·ªü r·ªông)
        file_groups = {}
        for filename in os.listdir(full_user_path):
            base_name = os.path.splitext(filename)[0]
            ext = os.path.splitext(filename)[1].lower()
            
            if base_name not in file_groups:
                file_groups[base_name] = {}
            
            if ext in self.supported_raw_extensions:
                file_groups[base_name]['raw'] = filename
            elif ext in self.supported_text_extensions:
                file_groups[base_name]['text'] = filename
        
        # X·ª≠ l√Ω t·ª´ng nh√≥m file
        for base_name, group in file_groups.items():
            processing_result['total_files'] += 1
            
            try:
                # Ki·ªÉm tra ƒë·ªß th√¥ng tin ƒë·ªÉ x·ª≠ l√Ω
                if 'raw' not in group:
                    processing_result['skipped_files'].append(base_name)
                    continue
                
                # ƒê·ªçc ·∫£nh raw
                raw_file_path = os.path.join(full_user_path, group['raw'])
                image = self.read_raw_image(raw_file_path)
                
                if image is None:
                    processing_result['errors'].append(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh {group['raw']}")
                    continue
                
                # L∆∞u ·∫£nh PNG
                output_image_path = os.path.join(output_user_path, f"{base_name}.png")
                cv2.imwrite(output_image_path, image)
                
                # Sao ch√©p file text (n·∫øu c√≥)
                if 'text' in group:
                    text_file_path = os.path.join(full_user_path, group['text'])
                    output_text_path = os.path.join(output_user_path, f"{base_name}.txt")
                    shutil.copy2(text_file_path, output_text_path)
                
                processing_result['processed_images'] += 1
                
            except Exception as e:
                processing_result['errors'].append(f"L·ªói x·ª≠ l√Ω {base_name}: {str(e)}")
        
        return processing_result
    
    def process_dataset(self):
        """
        X·ª≠ l√Ω to√†n b·ªô dataset
        
        Returns:
            list: Danh s√°ch k·∫øt qu·∫£ x·ª≠ l√Ω t·ª´ng th∆∞ m·ª•c ng∆∞·ªùi d√πng
        """
        overall_results = []
        
        # Duy·ªát qua c√°c th∆∞ m·ª•c ng∆∞·ªùi d√πng
        for user_folder in os.listdir(self.source_dir):
            full_user_path = os.path.join(self.source_dir, user_folder)
            
            # Ch·ªâ x·ª≠ l√Ω c√°c th∆∞ m·ª•c
            if os.path.isdir(full_user_path):
                print(f"üîç ƒêang x·ª≠ l√Ω th∆∞ m·ª•c: {user_folder}")
                user_result = self.process_user_folder(user_folder)
                overall_results.append(user_result)
                
                # In k·∫øt qu·∫£ t·ª´ng ng∆∞·ªùi d√πng
                print(f"üìä K·∫øt qu·∫£ x·ª≠ l√Ω {user_folder}:")
                print(f"  - T·ªïng s·ªë file: {user_result['total_files']}")
                print(f"  - ·∫¢nh ƒë√£ x·ª≠ l√Ω: {user_result['processed_images']}")
                if user_result['skipped_files']:
                    print(f"  - File b·ªã b·ªè qua: {user_result['skipped_files']}")
                if user_result['errors']:
                    print(f"  - L·ªói: {user_result['errors']}")
        
        return overall_results
    
    def generate_dataset_info(self, results):
        """
        T·∫°o file th√¥ng tin t·ªïng quan v·ªÅ dataset
        
        Args:
            results (list): K·∫øt qu·∫£ x·ª≠ l√Ω t·ª´ process_dataset()
        """
        dataset_info = {
            'total_users': len(results),
            'total_processed_images': sum(result['processed_images'] for result in results),
            'users': {}
        }
        
        for result in results:
            dataset_info['users'][result['user']] = {
                'total_files': result['total_files'],
                'processed_images': result['processed_images'],
                'skipped_files': result['skipped_files'],
                'errors': result['errors']
            }
        
        # L∆∞u th√¥ng tin dataset
        info_path = os.path.join(self.output_dir, 'dataset_info.json')
        with open(info_path, 'w', encoding='utf-8') as f:
            json.dump(dataset_info, f, indent=4, ensure_ascii=False)
        
        print(f"üìÑ ƒê√£ t·∫°o file th√¥ng tin dataset t·∫°i: {info_path}")
